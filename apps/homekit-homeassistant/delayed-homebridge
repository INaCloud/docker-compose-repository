#! /usr/bin/env node

const config = require('/root/.homebridge/config.json');
const http = require('http');
const { spawn } = require('child_process');
const url = require('url');

const platform = config.platforms[0];
const { host, password } = platform;
const { hostname, port } = url.parse(host);
const path = '/api/states';
const headers = {
  'x-ha-access': password,
};

const fetchState = () => {
  http.get({ hostname, port, path, headers }, (res) => {
    const { statusCode } = res;
    const contentType = res.headers['content-type'];

    let error;
    if (statusCode !== 200) {
      error = new Error('Request Failed.\n' +
                        `Status Code: ${statusCode}`);
    } else if (!/^application\/json/.test(contentType)) {
      error = new Error('Invalid content-type.\n' +
                        `Expected application/json but received ${contentType}`);
    }
    if (error) {
      console.error(error.message);
      // consume response data to free up memory
      res.resume();
      setTimeout(fetchState, 5000);
      return;
    }

    res.setEncoding('utf8');
    let rawData = '';
    res.on('data', (chunk) => { rawData += chunk; });
    res.on('end', () => {
      try {
        const parsedData = JSON.parse(rawData);
        const foundEntities = parsedData.map(entity => entity.entity_id);
        const missingEntities = config.requiredEntities.filter(entity => !foundEntities.includes(entity));
        if (missingEntities.length) {
          console.log(`Missing entities: ${missingEntities.join(', ')}. Retrying...`);
          setTimeout(fetchState, 5000);
        } else {
          console.log(`Found all entities! Done.`);

          const homebridge = spawn('homebridge');
          homebridge.stdout.on('data', (data) => console.log(`${data}`));
          homebridge.stderr.on('data', (data) => console.log(`${data}`));
          homebridge.on('close', (code) => {
            console.log(`homebridge exited with code ${code}`);
          });
        }
      } catch (e) {
        console.error(e.message);
        setTimeout(fetchState, 5000);
      }
    });
  }).on('error', (e) => {
    console.error(`Got error: ${e.message}`);
    setTimeout(fetchState, 5000);
  });
};

fetchState();
